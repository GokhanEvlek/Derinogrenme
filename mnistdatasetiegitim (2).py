# -*- coding: utf-8 -*-
"""MnistDataSetiEgitim.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19d-gqHRL46OuA2-WA7heZ5G-5mJ7pcbX

# Çalışma Ortamı
"""

# Commented out IPython magic to ensure Python compatibility.
from google.colab import drive
drive.mount('/gdrive')
# %cd /gdrive
#google collaba bağlanma

!pip install -q keras

!pip install  tensorflow
#kütüphanelerin yüklenmesi

import keras
from tensorflow.keras import layers 
from keras.layers import Dropout, Flatten, Conv2D, MaxPooling2D #kütüphanelerin eklenmesi
(egitimresimleri, egitimetiketleri),(testresimleri,testetiketleri)=keras.datasets.mnist.load_data() #mnist veri setinin ve labellerının değişkenlere train ve test veri setleri halinde yüklenmesi

modelim=keras.models.Sequential()#sequantial olarak derin öğrenme modelinin tanımlanması
modelim.add(Conv2D(32,kernel_size=(2,2),activation="relu",input_shape=(28,28,1)))#modelin ilk katmanı olarak 32 adet 2x2 boyutundaki filtre işleminde convolution katmanı
modelim.add(MaxPooling2D(pool_size=(2, 2)))#maxpooling yapılarak veriinin küçültülmesi
modelim.add(Flatten())#flattening işlemiyle verinin ayrıştırılıp normal katmanlar için girdi haline getirilmesi
modelim.add(layers.Dense(512,activation="relu"))#512 neuronlu katman
modelim.add(layers.Dense(10,activation="sigmoid"))#10 neuronlu çıkış katmanı
modelim.compile(optimizer="adam",loss = 'categorical_crossentropy', metrics = ['accuracy'])#modelin derlenmesi
egitimresimleri = egitimresimleri.reshape((60000, 28 , 28,1)) #eğitim resimleri için boyut arttırımı
egitimresimleri = egitimresimleri.astype('float32') / 255 #eğitim resimleri için normalizasyon işlemi

testresimleri = testresimleri.reshape((10000, 28 , 28,1))#test resimleri için boyut arttırımı
testresimleri = testresimleri.astype('float32') / 255 #eğitim resimleri için normalizasyon işlemi

from tensorflow.keras.utils import to_categorical

egitimetiketleri1 = to_categorical(egitimetiketleri) #labelleri derin öğrenme için 01 li hale getirilmesi 
testetiketleri1 = to_categorical(testetiketleri) #labelleri derin öğrenme için 01 li hale getirilmesi

modelim.fit(egitimresimleri,egitimetiketleri1,epochs=5,batch_size=128)

modelim.save('/mnist_model.h5')
score = modelim.evaluate(testresimleri, testetiketleri1, verbose=0)
print(score)

import cv2 as cv
from google.colab.patches import cv2_imshow
secenek=int(input("Eğer test kümesinden eleman seçmek istiyorsanız 1'e eğer kendi resminizi seçmek istiyorsanız 2'ye basınız."))
if secenek==1:
  eleman=int(input("Hangi elemanı seçmek istiyorsunuz?"))
  test_elemanı=testresimleri[eleman].reshape(1,28,28,1)
  pre=modelim.predict(test_elemanı)
  print(testetiketleri[eleman])
  print(pre)
  if pre[0][0]>=0.95 and pre[0][0]<=1.05:
    print("Girdiğiniz eleman 0 yazısıdır.")
  elif pre[0][1]>=0.95 and pre[0][1]<=1.05:
    print("Girdiğiniz eleman 1 yazısıdır.")
  elif pre[0][2]>=0.95 and pre[0][2]<=1.05:
    print("Girdiğiniz eleman 2 yazısıdır.")
  elif pre[0][3]>=0.95 and pre[0][3]<=1.05:
    print("Girdiğiniz eleman 3 yazısıdır.")
  elif pre[0][4]>=0.95 and pre[0][4]<=1.05:
    print("Girdiğiniz eleman 4 yazısıdır.")
  elif pre[0][5]>=0.95 and pre[0][5]<=1.05:
    print("Girdiğiniz eleman 5 yazısıdır.")
  elif pre[0][6]>=0.95 and pre[0][6]<=1.05:
    print("Girdiğiniz eleman 6 yazısıdır.")
  elif pre[0][7]>=0.95 and pre[0][7]<=1.05:
    print("Girdiğiniz eleman 7 yazısıdır.")
  elif pre[0][8]>=0.95 and pre[0][8]<=1.05:
    print("Girdiğiniz eleman 8 yazısıdır.")
  elif pre[0][9]>=0.95 and pre[0][9]<=1.05:
    print("Girdiğiniz eleman 9 yazısıdır.")
  else:
    print("Girdiğiniz sayı tanınamadı")
else:
  denenecek_eleman=input("Denemek istediğiniz resmin adresini giriniz:")
  img=cv.imread(denenecek_eleman)
  img=cv.cvtColor(img,cv.COLOR_BGR2GRAY)
  cv2_imshow(img)
  dimensions=28,28

  img=cv.resize(img,dimensions,interpolation=cv.INTER_AREA)
  img=img.astype('float32')/255
  img=img.reshape(1,28,28,1)
  pre=modelim.predict(img)
  print(pre)
  if pre[0][0]>=0.95 and pre[0][0]<=1.05:
    print("Girdiğiniz eleman 0 yazısıdır.")
  elif pre[0][1]>=0.95 and pre[0][1]<=1.05:
    print("Girdiğiniz eleman 1 yazısıdır.")
  elif pre[0][2]>=0.95 and pre[0][2]<=1.05:
    print("Girdiğiniz eleman 2 yazısıdır.")
  elif pre[0][3]>=0.95 and pre[0][3]<=1.05:
    print("Girdiğiniz eleman 3 yazısıdır.")
  elif pre[0][4]>=0.95 and pre[0][4]<=1.05:
    print("Girdiğiniz eleman 4 yazısıdır.")
  elif pre[0][5]>=0.95 and pre[0][5]<=1.05:
    print("Girdiğiniz eleman 5 yazısıdır.")
  elif pre[0][6]>=0.95 and pre[0][6]<=1.05:
    print("Girdiğiniz eleman 6 yazısıdır.")
  elif pre[0][7]>=0.95 and pre[0][7]<=1.05:
    print("Girdiğiniz eleman 7 yazısıdır.")
  elif pre[0][8]>=0.95 and pre[0][8]<=1.05:
    print("Girdiğiniz eleman 8 yazısıdır.")
  elif pre[0][9]>=0.95 and pre[0][9]<=1.05:
    print("Girdiğiniz eleman 9 yazısıdır.")
  else:
    print("Girdiğiniz sayı tanınamadı")